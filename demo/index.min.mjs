const trees=new WeakMap;function escape(t){const e=document.createElement("p");return e.textContent=t,e.innerHTML}function resolve(t,e){if(void 0!==t){const n=t[e];return"function"==typeof n?n.call():n}}function pluck(t,e){return escape(e.split(".").reduce(resolve,t)||"")}function bindings(t){const e=[];for(const n of t.childNodes)switch(n.nodeType){case 1:e.push(...bindAttributes(n)),e.push(...bindings(n));break;case 3:e.push(...bindText(n))}return e}function notifyTree(t){for(const e of t.observers)e();for(const e in t.children)notifyTree(t.children[e])}function appendChild(t,e){let n=t.children[e];return n||(n={name:e,children:{},observers:[]},t.children[e]=n),n}function compose(t,e){return function(){return t(e.apply(this,arguments))}}function descend(t,e,n){const r=compose(n,appendChild);return e.split(".").reduce(r,t)}function tree(t){let e=trees.get(t);return e||(e={children:{},observers:[]},trees.set(t,e)),e}function bind(t,e){const n=tree(e);for(const{target:r,key:o,update:s}of bindings(t)){const t=s.bind(r,e,o);descend(n,o,proxyOnce(e)).observers.push(t),s.call(r,e,o)}return t}function proxyOnce(t){let e=t;return function(t){return t.proxied||(proxy(e,t.name,notifyTree.bind(null,t)),t.proxied=!0),e=e[t.name],t}}function proxy(t,e,n){let r=t[e];Object.defineProperty(t,e,{get:()=>r,set:t=>{r=t,n()}})}function updateText(t,e){this.textContent=pluck(t,e)}function updateAttribute(t,e){this.value=pluck(t,e)}function parse(t){return t.split(/({{.+?}})/).map(t=>{return t.startsWith("{{")&&t.endsWith("}}")?{type:1,value:t.slice(2,-2).trim()}:{type:0,value:t}})}function bindAttributes(t){const e=[];for(const n of Array.from(t.attributes))for(const t of parse(n.value))1===t.type&&e.push({target:n,key:t.value,update:updateAttribute});return e}function bindText(t){const e=parse(t.textContent);if(1===e.length&&0===e[0].type)return[];const n=[];for(const r of e){const e=document.createTextNode(r.value);t.parentNode.insertBefore(e,t),1===r.type&&n.push({target:e,key:r.value,update:updateText})}return t.parentNode.removeChild(t),n}function stashe(t){return function(e){return bind(t,e)}}class AppComponent extends HTMLElement{constructor(){super(),this.connected=!1,this.observedAttributes=!1,this.data={},this.callbacks={connect:[],attributechange:[],disconnect:[]}}initTemplate(t,e){let n=stashe(AppComponent.template(t).content.cloneNode(!0));this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(n(e))}attributeChangedCallback(t,e,n){if(!this.connected||n===e||null===n)return!1;for(let e of this.observedAttributes)e===t&&(n=this.parseAttribute(n));this.data[t]=n,this.runCallbacks("attributechange")}connectedCallback(){if(this.connected=!0,!1!==this.observedAttributes&&"object"==typeof this.observedAttributes)for(let t of this.observedAttributes)this.data[t]=this.parseAttribute(this.getAttribute(t));this.runCallbacks("connect")}disconnectedCallback(){this.connected=!1,this.runCallbacks("disconnect")}parseAttribute(t){if(!t)return null;try{return JSON.parse(t)}catch(e){return t}}on(t,e){return this.callbacks[t]?(this.callbacks[t].push(e),!0):(console.log(`An event with the name of "${t}" is not supported.`),!1)}runCallbacks(t){if(this.callbacks[t])for(let e of this.callbacks[t])"function"==typeof e&&e()}}AppComponent.template=function(t){const e=document.createElement("template");return e.innerHTML=t,e},AppComponent.gatherElements=function(t,e){let n={},r=t.querySelectorAll("["+e+"]");for(let t of r){n["$"+t.getAttribute(e)]=t}return n};var tpl='<style> </style> <div class="hostdiv"> <div>hello!</div> <div></div> <div>{{ replaceme }}! {{ helpme }}</div> </div> ';class TestComponent extends AppComponent{constructor(){super(),this.observedAttributes=TestComponent.observedAttributes,this.initTemplate(tpl,this.data)}static get observedAttributes(){return["helpme","replaceme"]}}window.customElements.define("test-component",TestComponent);
